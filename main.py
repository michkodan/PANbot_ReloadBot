# - *- coding: utf- 8 - *-

import telebot
import buttons
from connectionCheck import CheckConnect
from mailing import GetUsers
from telebot import types
from config import MainConfig
from usersOnline import UsersOnline
from usersReload import UsersReload
from version import *
# from events import Events
import time
from dutyToDay import Duty

bot = telebot.TeleBot(MainConfig.TOKEN)
bot.get_updates(allowed_updates=['channel_post', 'message', 'callback_query'])

# –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–ï–†–°–ò–Æ –ë–û–¢–ê
try:
    get_version()
    set_version()
except Exception as e:
    bot.send_message(MainConfig.ADMIN_ID, f'–í–µ—Ä—Å–∏—è –Ω–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û—à–∏–±–∫–∞: {e}')


@bot.message_handler(commands=['start'])
def send_welcome(msg):
    if connected_check(msg):
        bot.send_message(msg.chat.id, MainConfig.CONNECTION_TEXT, parse_mode=['html'])
    else:
        bot.send_message(msg.chat.id, '–í—ã –Ω–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?',
                         reply_markup=buttons.welcome_buttons)


# –ó–ê–ë–ò–†–ê–ï–ú –ü–û–°–¢–´ –ò–ó –¢–ï–õ–ï–ì–†–ê–ú –ö–ê–ù–ê–õ–ê
@bot.channel_post_handler(content_types=['text', 'photo', 'video'])
def posts_from_channels(msg):
    users = GetUsers()
    try:
        if msg.content_type == 'photo':
            if '#—Å—Ç–∞—Ä—Ç–ø—Ä–æ–¥–∞–∂' in msg.caption or '#–Ω–æ–≤—ã–π–ø—É–ª' in msg.caption:
                for user in users.get_users():
                    try:
                        bot.forward_message(user, msg.chat.id, msg.message_id)
                        time.sleep(0.05)
                    except Exception as e:
                        bot.send_message(MainConfig.ADMIN_ID,
                                         f'ID {user} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ—É –ø—Ä–æ —Å—Ç–∞—Ä—Ç—ã\n'
                                         f'–û—à–∏–±–∫–∞: {e}. –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: –§–æ—Ç–æ')

        if msg.content_type == 'video':
            if '#—Å—Ç–∞—Ä—Ç–ø—Ä–æ–¥–∞–∂' in msg.caption or '#–Ω–æ–≤—ã–π–ø—É–ª' in msg.caption:
                for user in users.get_users():
                    try:
                        bot.forward_message(user, msg.chat.id, msg.message_id)
                        time.sleep(0.05)
                    except Exception as e:
                        bot.send_message(MainConfig.ADMIN_ID,
                                         f'ID {user} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ—É –ø—Ä–æ —Å—Ç–∞—Ä—Ç—ã\n'
                                         f'–û—à–∏–±–∫–∞: {e}. –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: –í–∏–¥–µ–æ')

        if '#—Å—Ç–∞—Ä—Ç–ø—Ä–æ–¥–∞–∂' in msg.text or '#–Ω–æ–≤—ã–π–ø—É–ª' in msg.text:
            for user in MainConfig.ADMINS:
                try:
                    bot.forward_message(user, msg.chat.id, msg.message_id)
                    time.sleep(0.05)
                except Exception as e:
                    bot.send_message(MainConfig.ADMIN_ID,
                                     f'ID {user} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ—É –ø—Ä–æ —Å—Ç–∞—Ä—Ç—ã\n'
                                     f'–û—à–∏–±–∫–∞: {e}. –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: –¢–µ–∫—Å—Ç')

    except Exception as e:
        pass


# –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ö–û–ú–ê–ù–î–´
@bot.message_handler(content_types='text')
def admin(msg):
    if msg.from_user.id in MainConfig.ADMINS:
        if 'mailing' in msg.text:
            msg_text = msg.text
            msg_text_format = msg_text.replace('mailing', '')
            users = GetUsers()
            try:
                for user in users.get_users():
                    try:
                        bot.send_message(user, msg_text_format)
                    except Exception as e:
                        bot.send_message(MainConfig.ADMIN_ID, f'–ë–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å–ª—ã–∫—É. –£–ø–∞–ª–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user}'
                                                              f'. –û—à–∏–±–∫–∞: {e}')
            except Exception as e:
                bot.send_message(MainConfig.ADMIN_ID, f'–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º.'
                                                      f'–û—à–∏–±–∫–∞: {e}')

        if 'count' in msg.text:
            users = GetUsers()
            try:
                bot.send_message(msg.from_user.id, text='–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + str(len(users.get_users())))
            except Exception as e:
                bot.send_message(msg.from_user.id, text=e)

        if 'online' in msg.text:
            users_online = UsersOnline()
            try:
                bot.send_message(msg.from_user.id, text='–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: ' +
                                                        str(users_online.get_online_users()))
            except Exception as e:
                bot.send_message(msg.from_user.id, text=e)

        if 'reload' in msg.text:
            users_reload = UsersReload()
            try:
                bot.send_message(msg.from_user.id, text='–°—Ç–∞—Ç—É—Å: ' + str(users_reload.reload()))
            except Exception as e:
                bot.send_message(msg.from_user.id, text=e)

        if 'version' in msg.text:
            try:
                bot.send_message(msg.from_user.id, text=f'–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {get_version()}')
            except Exception as e:
                bot.send_message(msg.from_user.id, text=e)

    if 'duty' in msg.text:
        try:
            managerOnDuty = Duty()
            data = managerOnDuty.get_duty()
            bot.send_message(msg.from_user.id, text=data, parse_mode=['html'])
        except Exception as e:
            bot.send_message(msg.from_user.id, text='–û–π, —Å—Ö–µ–º—ã –∑–∞–º–∫–Ω—É–ª–æ ü§ñ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            bot.send_message(MainConfig.ADMIN_ID, f'–ó–∞–ø—Ä–æ—Å –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}')


# –ü–ò–ù–ò–ú –°–û–û–ë–©–ï–ù–ò–ï –° –ö–û–ú–ê–ù–î–ê–ú–ò
@bot.callback_query_handler(func=lambda msg: msg.data == 'func_list')
def pin_message(msg):
    bot.answer_callback_query(msg.id)
    try:
        bot.pin_chat_message(msg.message.chat.id, msg.message.message_id)
        bot.edit_message_reply_markup(msg.message.chat.id, msg.message.message_id)
    except Exception as e:
        bot.send_message(MainConfig.ADMIN_ID, f'–ë–æ—Ç —É–ø–∞–ª –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n'
                                              f'{e}')


# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–û–¢–£
@bot.callback_query_handler(func=lambda msg: msg.data == 'partner_true' or msg.data == 'bot_reconnect')
def new_user_btn(msg):
    bot.answer_callback_query(msg.id)
    bot.send_message(MainConfig.ADMIN_ID, f'–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –±–æ—Ç—É!')
    link = 'new.panpartner.ru/bot/' + str(msg.from_user.id)
    # link = 'dev2.panpartner.ru/app/bot/' + str(msg.from_user.id)
    bot_connected = types.InlineKeyboardMarkup(row_width=1)
    url_button = types.InlineKeyboardButton(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –±–æ—Ç—É ü§ñ", url=link)
    bot_connected.add(url_button)
    bot.send_message(msg.message.chat.id, f'–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –í–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É panpartner, '
                                          f' –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ<a href="{link}"> —Å—Å—ã–ª–∫–µ!</a>',
                     parse_mode=['html'], reply_markup=bot_connected)


# –°–¢–ê–¢–¨ –ü–ê–†–¢–ù–ï–†–û–ú
@bot.callback_query_handler(func=lambda msg: msg.data == 'partner_false')
def be_partner_btn(msg):
    bot.answer_callback_query(msg.id)
    partner_reg = types.InlineKeyboardMarkup(row_width=1)
    partner_button = types.InlineKeyboardButton("C—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º ü§ù", url='panpartner.ru')
    partner_reg.add(partner_button)
    bot.send_message(msg.message.chat.id, MainConfig.NEW_PARTNER_TEXT, parse_mode=['html'], reply_markup=partner_reg)


# –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
@bot.callback_query_handler(func=lambda msg: msg.data == 'connected_check')
def connection_check_btn(msg):
    bot.answer_callback_query(msg.id)
    try:
        if connected_check(msg):
            bot.send_message(msg.from_user.id, text=MainConfig.CONNECTION_TEXT, parse_mode=['html'])
        else:
            bot.send_message(msg.from_user.id, text='–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–æ—Ç—É üòû',
                             reply_markup=buttons.bot_reconnect)
            bot.send_message(MainConfig.ADMIN_ID, '–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º.')
    except Exception as e:
        bot.send_message(msg.message.chat.id, f'–û–π, —Å—Ö–µ–º—ã –∑–∞–º–∫–Ω—É–ª–æ ü§ñ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, '
                                              f'—á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è ‚¨áÔ∏è',
                         parse_mode=['html'], reply_markup=buttons.bot_reconnect)
        bot.send_message(MainConfig.ADMIN_ID, f'–ë–æ—Ç —É–ø–∞–ª –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n'
                                              f'{e}')


# –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï
def connected_check(msg):
    user_id = CheckConnect(msg.from_user.id)
    return user_id.connection_check()


# –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø
@bot.callback_query_handler(func=lambda msg: 'confirm' in msg.data)
def events_confirm(msg):
    try:
        event_id = msg.data.replace('confirm ', '')
        user_id = msg.from_user.id
        confirm = Events(int(user_id), int(event_id))
        bot.send_message(msg.from_user.id, text=confirm.confirm_entry())
    except Exception as e:
        bot.send_message(msg.from_user.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢')


@bot.callback_query_handler(func=lambda msg: 'cancel' in msg.data)
def events_cancel(msg):
    try:
        event_id = msg.data.replace('cancel ', '')
        user_id = msg.from_user.id
        cancel = Events(int(user_id), int(event_id))
        bot.send_message(msg.from_user.id, text=cancel.cancel_entry())
    except Exception as e:
        bot.send_message(msg.from_user.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢')


if __name__ == '__main__':
    bot.infinity_polling(none_stop=True)
