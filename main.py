# - *- coding: utf- 8 - *-

import telebot
import buttons
from connectionCheck import CheckConnect
from mailing import GetUsers
from telebot import types
from config import MainConfig
from usersOnline import UsersOnline
from usersReload import UsersReload

bot = telebot.TeleBot(MainConfig.TOKEN)
bot.get_updates(allowed_updates=['channel_post', 'message', 'callback_query'])


@bot.message_handler(commands=['start'])
def send_welcome(msg):
    if connected_check(msg):
        bot.send_message(msg.chat.id, MainConfig.CONNECTION_TEXT, parse_mode=['html'])
    else:
        bot.send_message(msg.chat.id, '–í—ã –Ω–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä?',
                         reply_markup=buttons.welcome_buttons)


@bot.channel_post_handler(content_types=['text', 'photo', 'video'])
def posts_from_channels(msg):
    users = GetUsers()
    try:
        if msg.content_type == 'photo':
            if '#—Å—Ç–∞—Ä—Ç–ø—Ä–æ–¥–∞–∂' in msg.caption:
                photo_data = msg.json
                photo_id = photo_data['photo'][1]['file_id']
                for user in users.get_users():
                    try:
                        bot.send_photo(user, photo_id, caption=msg.caption)
                    except Exception as e:
                        bot.send_message(MainConfig.ADMIN_ID,
                                         f'ID {user} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ—É –ø—Ä–æ —Å—Ç–∞—Ä—Ç—ã\n'
                                         f'–û—à–∏–±–∫–∞: {e}')
        else:
            if '#—Å—Ç–∞—Ä—Ç–ø—Ä–æ–¥–∞–∂' in msg.text:
                for user in MainConfig.ADMINS:
                    try:
                        bot.send_message(user, msg.text)
                    except Exception as e:
                        bot.send_message(MainConfig.ADMIN_ID,
                                         f'ID {user} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ—É –ø—Ä–æ —Å—Ç–∞—Ä—Ç—ã\n'
                                         f'–û—à–∏–±–∫–∞: {e}')
    except Exception as e:
        bot.send_message(MainConfig.ADMIN_ID, f'–ë–æ—Ç —É–ø–∞–ª –ø—Ä–∏ –ø–æ–ø—Ç—ã–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä—Ç–∞—Ö:\n'
                                              f'{e}')


# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(content_types='text')
def admin(msg):
    if msg.from_user.id in MainConfig.ADMINS:
        if 'mailing' in msg.text:
            msg_text = msg.text
            msg_text_format = msg_text.replace('mailing', '')
            users = GetUsers()
            try:
                for user in users.get_users():
                    try:
                        bot.send_message(user, msg_text_format)
                    except Exception as e:
                        bot.send_message(MainConfig.ADMIN_ID, f'–ë–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å–ª—ã–∫—É. –£–ø–∞–ª–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user}'
                                                              f'. –û—à–∏–±–∫–∞: {e}')
            except Exception as e:
                bot.send_message(MainConfig.ADMIN_ID, f'–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º.'
                                                      f'–û—à–∏–±–∫–∞: {e}')

        if 'count' in msg.text:
            users = GetUsers()
            try:
                bot.send_message(msg.from_user.id, text='–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + str(len(users.get_users())))
            except Exception as e:
                bot.send_message(msg.from_user.id, text=e)

        if 'online' in msg.text:
            users_online = UsersOnline()
            try:
                bot.send_message(msg.from_user.id, text='–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: ' +
                                                        str(users_online.get_online_users()))
            except Exception as e:
                bot.send_message(msg.from_user.id, text=e)

        if 'reload' in msg.text:
            users_reload = UsersReload()
            try:
                bot.send_message(msg.from_user.id, text='–°—Ç–∞—Ç—É—Å: ' + str(users_reload.reload()))
            except Exception as e:
                bot.send_message(msg.from_user.id, text=e)


@bot.callback_query_handler(func=lambda msg: 'confirm' in msg.data)
def events_approve(msg):
    print(msg.data.replace('confirm ', ''))
    print(msg.from_user.id)
    bot.answer_callback_query(msg.id, show_alert=True, text='Test')
    bot.send_message(msg.from_user.id, text='–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!')


@bot.callback_query_handler(func=lambda msg: 'cancel' in msg.data)
def events_approve(msg):
    print(msg.data.replace('cancel ', ''))
    print(msg.from_user.id)
    bot.answer_callback_query(msg.id, show_alert=True, text='Test2')
    bot.send_message(msg.from_user.id, text='–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!')


# –ü–æ–¥–∫—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
@bot.callback_query_handler(func=lambda msg: msg.data == 'partner_true' or msg.data == 'bot_reconnect')
def new_user_btn(msg):
    bot.send_message(MainConfig.ADMIN_ID, f'–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –±–æ—Ç—É!')
    link = 'new.panpartner.ru/bot/' + str(msg.from_user.id)
    bot_connected = types.InlineKeyboardMarkup(row_width=1)
    url_button = types.InlineKeyboardButton(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –±–æ—Ç—É ü§ñ", url=link)
    connected_button = types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ *Ô∏è‚É£', callback_data='connected_check')
    bot_connected.add(url_button, connected_button)
    bot.send_message(msg.message.chat.id, f'–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –í–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É panpartner, '
                                          f' –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ<a href="{link}"> —Å—Å—ã–ª–∫–µ!</a>',
                     parse_mode=['html'], reply_markup=bot_connected)


# –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
@bot.callback_query_handler(func=lambda msg: msg.data == 'partner_false')
def be_partner_btn(msg):
    partner_reg = types.InlineKeyboardMarkup(row_width=1)
    partner_button = types.InlineKeyboardButton("C—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º ü§ù", url='panpartner.ru')
    partner_reg.add(partner_button)
    bot.send_message(msg.message.chat.id, MainConfig.NEW_PARTNER_TEXT, parse_mode=['html'], reply_markup=partner_reg)


# –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda msg: msg.data == 'connected_check')
def connection_check_btn(msg):
    try:
        if connected_check(msg):
            bot.send_message(msg.from_user.id, text=MainConfig.CONNECTION_TEXT, parse_mode=['html'])
        else:
            bot.send_message(msg.from_user.id, text='–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–æ—Ç—É üòû',
                             reply_markup=buttons.bot_reconnect)
            bot.send_message(MainConfig.ADMIN_ID, '–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º.')
    except Exception as e:
        bot.send_message(msg.message.chat.id, f'–û–π, —Å—Ö–µ–º—ã –∑–∞–º–∫–Ω—É–ª–æ ü§ñ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, '
                                              f'—á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è ‚¨áÔ∏è',
                         parse_mode=['html'], reply_markup=buttons.bot_reconnect)
        bot.send_message(MainConfig.ADMIN_ID, f'–ë–æ—Ç —É–ø–∞–ª –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n'
                                              f'{e}')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
def connected_check(msg):
    user_id = CheckConnect(msg.from_user.id)
    return user_id.connection_check()


if __name__ == '__main__':
    bot.infinity_polling(none_stop=True)
